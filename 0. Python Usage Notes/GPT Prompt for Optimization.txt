Step 1 - Please read the "" on LeetCode (enclosed by <<< and >>>).

<<<

>>>

-

Step 2 - Please read the following solution to the question (enclosed by ``` and ```).

```

```

-

Step 3 - Can you help me analyze the complexity of time and space? Also, is the current solution easy to understand, clean, and the most effective? 

If yes, please help me generate the complete code with test cases (with assert()) and proper step comments (appropriate simple comments within the short time constraints of the interview, e.g., Step 1 - ..., Step 2 - ..., etc.). 

If not, please help me generate the best improvements to the entire code through test cases (with assert()) and proper step comments (appropriate comments within the short time constraints of the interview, e.g., Step 1 - ..., Step 2 - ..., etc.).

-

Step 4 - Please review my code to understand my programming style, where I strictly followed the Google Python Style Guide or PEP8.

<my programming style>
"""
A module to search headlines by keyword from a CSV file containing news data.

This module defines a function to search through headlines for keywords and return
a list of headlines that match the keywords based on a high-rank similarity score.

Typical usage example:

1. Prepare your CSV file containing the news data using the 'news_scraper.py' script. 
    In this module, the file should be named: 'summarized_new_york_crime_news.csv' and 
    is located in the 'news' directory.

2. Run the script.
    In jupyter notebook, run the script by pressing the run/play button for each cell.
    In terminal, run the script using the command 'python find_headline_by_keyword.py'
        in the 'sources' directory.

3. Enter the keyword to search for in the headlines and the minimum similarity score 
    threshold when prompted.
"""

import pandas as pd
from fuzzywuzzy import fuzz, process


class NewsHeadlineSearcher:
    """
    Search for news headlines containing specific keywords.

    Attributes:
        df (pd.DataFrame): DataFrame containing news data loaded from a CSV file.
    """

    def __init__(self, csv_file):
        """
        Initializes NewsHeadlineSearcher by loading news data from a CSV file.

        Args:
            csv_file (str): Path to the CSV file containing news data.
        """
        self.df = pd.read_csv(csv_file)
        self.headlines_to_index = {
            headline: i for i, headline in enumerate(self.df["title"].tolist())
        }

    def find_headline_by_keyword(self, keyword, score_threshold=75):
        """
        Searches for headlines containing the specified keyword.

        Searches headlines for the given keyword using fuzzy string matching score
        and returns a list of matching headlines.

        Args:
            keyword (str): The keyword to search for in the headlines.
            score_threshold (int, optional): The minimum similarity score required
                                             for a match. Defaults to 75.

        Returns:
            list: List of dictionaries containing matching headlines and their records.


        The fuzzywuzzy library provides several ratios for string matching:

        - fuzz.ratio: Compares the entire strings, which is the default.
        - fuzz.partial_ratio: Compares the query string to the best matching substring
                                in the target string.
        - fuzz.token_sort_ratio: Tokenizes the strings, sorts the tokens, and compares
                                   them.
        - fuzz.token_set_ratio: Tokenizes the strings, reduces them to the
                                  intersection of tokens, and compares them.
        """
        headlines = self.df["title"].tolist()

        # Using fuzz.partial_ratio for higher relevance in keyword search
        matches = process.extract(
            keyword, headlines, limit=len(headlines), scorer=fuzz.partial_ratio
        )

        matched_records = [
            {
                "headline": match[0],
                "score": match[1],
                "record": self.df.iloc[self.headlines_to_index[match[0]]][
                    [
                        "published",
                        "publisher",
                        "title",
                        "gpt_summarized_content",
                        "link",
                    ]
                ].to_dict(),
            }
            for match in matches
            if match[1] >= score_threshold
        ]
        return matched_records


def main():
    """
    Main function to demonstrate the usage of the NewsHeadlineSearcher class.
    """
    csv_file = "news/summarized_new_york_crime_news.csv"
    searcher = NewsHeadlineSearcher(csv_file)

    keyword = input("Enter the keyword to search for in the headlines: ")
    score_threshold_input = input(
        "Enter the minimum similarity score threshold (0-100, default is 75): "
    )
    score_threshold = int(score_threshold_input) if score_threshold_input else 75

    results = searcher.find_headline_by_keyword(keyword, score_threshold)

    print(
        f"\nHeadlines containing the keyword '{keyword}' "
        + f"with a similarity score of at least {score_threshold}:\n"
    )
    for result in results:
        print(f"Score: {result['score']}, Headline: {result['headline']}")
        print(f"Record: {result['record']}\n")


if __name__ == "__main__":
    main()

</my programming style>

-

<google style guide>

### 3.8 Comments and Docstrings 

Be sure to use the right style for module, function, method docstrings and
inline comments.

<a id="s3.8.1-comments-in-doc-strings"></a>
<a id="381-docstrings"></a>
<a id="comments-in-doc-strings"></a>

<a id="docstrings"></a>
#### 3.8.1 Docstrings 

Python uses *docstrings* to document code. A docstring is a string that is the
first statement in a package, module, class or function. These strings can be
extracted automatically through the `__doc__` member of the object and are used
by `pydoc`.
(Try running `pydoc` on your module to see how it looks.) Always use the
three-double-quote `"""` format for docstrings (per
[PEP 257](https://peps.python.org/pep-0257/)). A docstring should be organized
as a summary line (one physical line not exceeding 80 characters) terminated by
a period, question mark, or exclamation point. When writing more (encouraged),
this must be followed by a blank line, followed by the rest of the docstring
starting at the same cursor position as the first quote of the first line. There
are more formatting guidelines for docstrings below.

<a id="s3.8.2-comments-in-modules"></a>
<a id="382-modules"></a>
<a id="comments-in-modules"></a>

<a id="module-docs"></a>
#### 3.8.2 Modules 

Every file should contain license boilerplate. Choose the appropriate boilerplate for the license used by the project (for example, Apache 2.0, BSD, LGPL, GPL).

Files should start with a docstring describing the contents and usage of the
module.
```python
"""A one-line summary of the module or program, terminated by a period.

Leave one blank line.  The rest of this docstring should contain an
overall description of the module or program.  Optionally, it may also
contain a brief description of exported classes and functions and/or usage
examples.

Typical usage example:

  foo = ClassFoo()
  bar = foo.FunctionBar()
"""
```


<a id="s3.8.2.1-test-modules"></a>

<a id="test-docs"></a>
##### 3.8.2.1 Test modules 

Module-level docstrings for test files are not required. They should be included
only when there is additional information that can be provided.

Examples include some specifics on how the test should be run, an explanation of
an unusual setup pattern, dependency on the external environment, and so on.

```python
"""This blaze test uses golden files.

You can update those files by running
`blaze run //foo/bar:foo_test -- --update_golden_files` from the `google3`
directory.
"""
```

Docstrings that do not provide any new information should not be used.

```python
"""Tests for foo.bar."""
```

<a id="s3.8.3-functions-and-methods"></a>
<a id="383-functions-and-methods"></a>
<a id="functions-and-methods"></a>

<a id="function-docs"></a>
#### 3.8.3 Functions and Methods 

In this section, "function" means a method, function, generator, or property.

A docstring is mandatory for every function that has one or more of the
following properties:

-   being part of the public API
-   nontrivial size
-   non-obvious logic

A docstring should give enough information to write a call to the function
without reading the function's code. The docstring should describe the
function's calling syntax and its semantics, but generally not its
implementation details, unless those details are relevant to how the function is
to be used. For example, a function that mutates one of its arguments as a side
effect should note that in its docstring. Otherwise, subtle but important
details of a function's implementation that are not relevant to the caller are
better expressed as comments alongside the code than within the function's
docstring.

The docstring may be descriptive-style (`"""Fetches rows from a Bigtable."""`)
or imperative-style (`"""Fetch rows from a Bigtable."""`), but the style should
be consistent within a file. The docstring for a `@property` data descriptor
should use the same style as the docstring for an attribute or a
<a href="#doc-function-args">function argument</a> (`"""The Bigtable path."""`,
rather than `"""Returns the Bigtable path."""`).

Certain aspects of a function should be documented in special sections, listed
below. Each section begins with a heading line, which ends with a colon. All
sections other than the heading should maintain a hanging indent of two or four
spaces (be consistent within a file). These sections can be omitted in cases
where the function's name and signature are informative enough that it can be
aptly described using a one-line docstring.

<a id="doc-function-args"></a>
[*Args:*](#doc-function-args)
:   List each parameter by name. A description should follow the name, and be
    separated by a colon followed by either a space or newline. If the
    description is too long to fit on a single 80-character line, use a hanging
    indent of 2 or 4 spaces more than the parameter name (be consistent with the
    rest of the docstrings in the file). The description should include required
    type(s) if the code does not contain a corresponding type annotation. If a
    function accepts `*foo` (variable length argument lists) and/or `**bar`
    (arbitrary keyword arguments), they should be listed as `*foo` and `**bar`.

<a id="doc-function-returns"></a>
[*Returns:* (or *Yields:* for generators)](#doc-function-returns)
:   Describe the semantics of the return value, including any type information
    that the type annotation does not provide. If the function only returns
    None, this section is not required. It may also be omitted if the docstring
    starts with "Return", "Returns", "Yield", or "Yields" (e.g. `"""Returns row
    from Bigtable as a tuple of strings."""`) *and* the opening sentence is
    sufficient to describe the return value. Do not imitate older 'NumPy style'
    ([example](https://numpy.org/doc/1.24/reference/generated/numpy.linalg.qr.html)),
    which frequently documented a tuple return value as if it were multiple
    return values with individual names (never mentioning the tuple). Instead,
    describe such a return value as: "Returns: A tuple (mat_a, mat_b), where
    mat_a is ..., and ...". The auxiliary names in the docstring need not
    necessarily correspond to any internal names used in the function body (as
    those are not part of the API). If the function uses `yield` (is a
    generator), the `Yields:` section should document the object returned by
    `next()`, instead of the generator object itself that the call evaluates to.

<a id="doc-function-raises"></a>
[*Raises:*](#doc-function-raises)
:   List all exceptions that are relevant to the interface followed by a
    description. Use a similar exception name + colon + space or newline and
    hanging indent style as described in *Args:*. You should not document
    exceptions that get raised if the API specified in the docstring is violated
    (because this would paradoxically make behavior under violation of the API
    part of the API).

```python
def fetch_smalltable_rows(
    table_handle: smalltable.Table,
    keys: Sequence[bytes | str],
    require_all_keys: bool = False,
) -> Mapping[bytes, tuple[str, ...]]:
    """Fetches rows from a Smalltable.

    Retrieves rows pertaining to the given keys from the Table instance
    represented by table_handle.  String keys will be UTF-8 encoded.

    Args:
        table_handle: An open smalltable.Table instance.
        keys: A sequence of strings representing the key of each table
          row to fetch.  String keys will be UTF-8 encoded.
        require_all_keys: If True only rows with values set for all keys will be
          returned.

    Returns:
        A dict mapping keys to the corresponding table row data
        fetched. Each row is represented as a tuple of strings. For
        example:

        {b'Serak': ('Rigel VII', 'Preparer'),
         b'Zim': ('Irk', 'Invader'),
         b'Lrrr': ('Omicron Persei 8', 'Emperor')}

        Returned keys are always bytes.  If a key from the keys argument is
        missing from the dictionary, then that row was not found in the
        table (and require_all_keys must have been False).

    Raises:
        IOError: An error occurred accessing the smalltable.
    """
```

Similarly, this variation on `Args:` with a line break is also allowed:

```python
def fetch_smalltable_rows(
    table_handle: smalltable.Table,
    keys: Sequence[bytes | str],
    require_all_keys: bool = False,
) -> Mapping[bytes, tuple[str, ...]]:
    """Fetches rows from a Smalltable.

    Retrieves rows pertaining to the given keys from the Table instance
    represented by table_handle.  String keys will be UTF-8 encoded.

    Args:
      table_handle:
        An open smalltable.Table instance.
      keys:
        A sequence of strings representing the key of each table row to
        fetch.  String keys will be UTF-8 encoded.
      require_all_keys:
        If True only rows with values set for all keys will be returned.

    Returns:
      A dict mapping keys to the corresponding table row data
      fetched. Each row is represented as a tuple of strings. For
      example:

      {b'Serak': ('Rigel VII', 'Preparer'),
       b'Zim': ('Irk', 'Invader'),
       b'Lrrr': ('Omicron Persei 8', 'Emperor')}

      Returned keys are always bytes.  If a key from the keys argument is
      missing from the dictionary, then that row was not found in the
      table (and require_all_keys must have been False).

    Raises:
      IOError: An error occurred accessing the smalltable.
    """
```

<a id="s3.8.3.1-overridden-methods"></a>

<a id="overridden-method-docs"></a>
##### 3.8.3.1 Overridden Methods 

A method that overrides a method from a base class does not need a docstring if
it is explicitly decorated with
[`@override`](https://typing-extensions.readthedocs.io/en/latest/#override)
(from `typing_extensions` or `typing` modules), unless the overriding method's
behavior materially refines the base method's contract, or details need to be
provided (e.g., documenting additional side effects), in which case a docstring
with at least those differences is required on the overriding method.

```python
from typing_extensions import override

class Parent:
  def do_something(self):
    """Parent method, includes docstring."""

# Child class, method annotated with override.
class Child(Parent):
  @override
  def do_something(self):
    pass
```

```python
# Child class, but without @override decorator, a docstring is required.
class Child(Parent):
  def do_something(self):
    pass

# Docstring is trivial, @override is sufficient to indicate that docs can be
# found in the base class.
class Child(Parent):
  @override
  def do_something(self):
    """See base class."""
```

<a id="s3.8.4-comments-in-classes"></a>
<a id="384-classes"></a>
<a id="comments-in-classes"></a>

<a id="class-docs"></a>
#### 3.8.4 Classes 

Classes should have a docstring below the class definition describing the class.
Public attributes, excluding [properties](#properties), should be documented
here in an `Attributes` section and follow the same formatting as a
[function's `Args`](#doc-function-args) section.

```python
class SampleClass:
    """Summary of class here.

    Longer class information...
    Longer class information...

    Attributes:
        likes_spam: A boolean indicating if we like SPAM or not.
        eggs: An integer count of the eggs we have laid.
    """

    def __init__(self, likes_spam: bool = False):
        """Initializes the instance based on spam preference.

        Args:
          likes_spam: Defines if instance exhibits this preference.
        """
        self.likes_spam = likes_spam
        self.eggs = 0

    @property
    def butter_sticks(self) -> int:
        """The number of butter sticks we have."""
```

All class docstrings should start with a one-line summary that describes what
the class instance represents. This implies that subclasses of `Exception`
should also describe what the exception represents, and not the context in which
it might occur. The class docstring should not repeat unnecessary information,
such as that the class is a class.

```python
# Yes:
class CheeseShopAddress:
  """The address of a cheese shop.

  ...
  """

class OutOfCheeseError(Exception):
  """No more cheese is available."""
```

```python
# No:
class CheeseShopAddress:
  """Class that describes the address of a cheese shop.

  ...
  """

class OutOfCheeseError(Exception):
  """Raised when no more cheese is available."""
```

<a id="s3.8.5-block-and-inline-comments"></a>
<a id="comments-in-block-and-inline"></a>
<a id="s3.8.5-comments-in-block-and-inline"></a>
<a id="385-block-and-inline-comments"></a>

<a id="comments"></a>
#### 3.8.5 Block and Inline Comments 

The final place to have comments is in tricky parts of the code. If you're going
to have to explain it at the next [code review](http://en.wikipedia.org/wiki/Code_review),
you should comment it now. Complicated operations get a few lines of comments
before the operations commence. Non-obvious ones get comments at the end of the
line.

```python
# We use a weighted dictionary search to find out where i is in
# the array.  We extrapolate position based on the largest num
# in the array and the array size and then do binary search to
# get the exact number.

if i & (i-1) == 0:  # True if i is 0 or a power of 2.
```

To improve legibility, these comments should start at least 2 spaces away from
the code with the comment character `#`, followed by at least one space before
the text of the comment itself.

On the other hand, never describe the code. Assume the person reading the code
knows Python (though not what you're trying to do) better than you do.

```python
# BAD COMMENT: Now go through the b array and make sure whenever i occurs
# the next element is i+1
```

<!-- The next section is copied from the C++ style guide. -->

<a id="s3.8.6-punctuation-spelling-and-grammar"></a>
<a id="386-punctuation-spelling-and-grammar"></a>
<a id="spelling"></a>
<a id="punctuation"></a>
<a id="grammar"></a>

<a id="punctuation-spelling-grammar"></a>
#### 3.8.6 Punctuation, Spelling, and Grammar 

Pay attention to punctuation, spelling, and grammar; it is easier to read
well-written comments than badly written ones.

Comments should be as readable as narrative text, with proper capitalization and
punctuation. In many cases, complete sentences are more readable than sentence
fragments. Shorter comments, such as comments at the end of a line of code, can
sometimes be less formal, but you should be consistent with your style.

Although it can be frustrating to have a code reviewer point out that you are
using a comma when you should be using a semicolon, it is very important that
source code maintain a high level of clarity and readability. Proper
punctuation, spelling, and grammar help with that goal.

</google style guide>

-

Step 5 - Please use my coding style (i.e. Google Python Style Guide or PEP8) to produce the final complete Python code for this problem (using an object-oriented approach, i.e. classes). Include module (text at the beginning of the file), class, and function docstrings (including main()). Comments should be a maximum of 88 characters per line. Remain the class name `Solution` and the function name I sent you, while they don't follow the guidelines.